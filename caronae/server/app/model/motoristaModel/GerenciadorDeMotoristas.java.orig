package model.motoristaModel;

import model.caronaModel.Carona;
import model.pessoaModel.GerenciadorDePessoas;
import model.pessoaModel.Pessoa;

import java.util.HashMap;

import exceptions.HttpException;

/**
 * Created by stenio, aline.
 */
<<<<<<< HEAD
public class GerenciadorDeMotoristas implements MotoristaService {
	
    private HashMap<Integer, Motorista> motoristas = new HashMap<>();
    
    private static GerenciadorDeMotoristas gerenciador;
    
    private MotoristaDAO dao = new MotoristaDAO();
    
    private GerenciadorDePessoas gerenciadorDePessoas = GerenciadorDePessoas.getGerenciador();
=======
public class GerenciadorDeMotoristas {

    private static GerenciadorDeMotoristas gerenciador;

    private MotoristaDao motoristaDao = new MotoristaDao();

    private MotoristaValidador motoristaValidador = new MotoristaValidador();
>>>>>>> master

    private GerenciadorDeMotoristas() {};

    /**
     * @return A instancia de GerenciadorDeMotoristas
     */
    public static GerenciadorDeMotoristas getGerenciador() {
        if (gerenciador == null)
            gerenciador = new GerenciadorDeMotoristas();

        return gerenciador;
    }
    
    /**
     * Recupera um motorista da coleção de motoristas
     * @param {String} matricula
     *          A matricula do motorista
     * @return {Object} motorista
     *          Retorna null se não existir algum motorista com a mesma matricula que a especificada, caso contrário retorna o motorista
     */
    public Motorista getMotorista(String matricula) {
        motoristaValidador.validarExistenciaMotorista(matricula);
        Motorista motorista = motoristaDao.getMotorista(matricula);
        return motorista;
    }

    /**
     * Adiciona um motorista a coleção de motoristas
     * @param {Object} motorista
     *          o motorista a ser adicionado
     */
    public void addMotorista(Motorista motorista) {
       motoristaValidador.validarCadastro(motorista);
       motoristaDao.persistirMotorista(motorista);
    }

    /**
     * Verifica se existe algum motorista cadastrado com aquela matricula;
     * @param matricula A matricula do motorista
     * @return true se existe um motorista com a mesma matricula, caso contrário false
     */
    public boolean existeMotorista(String matricula) {
        return motoristaDao.existeMotorista(matricula);
    }
<<<<<<< HEAD

	@Override
	public Motorista getMotorista(String idMotorista) {
		//return dao.getMotorista(idMotorista);
		return null;
	}

	@Override
	public void addMotoristaNaCarona(Motorista motorista, Carona carona) {
		//motorista.setIdMotorista(carona.getId());
		//dao.atualizarMotorista(motorista);
	}
}
=======
}
>>>>>>> master
